//
//  ResultController.swift
//  baseapp
//
//  Created Thanh Nguyên Trần on 13/04/2022.
//  Copyright © 2022 Avengers Mobile Team. All rights reserved.
//
//  Template generated by Avengers Mobile Team
//
protocol DataControllerDelegate{
    func saveData()
    func saveDataBug()
}
import UIKit
import Foundation
import Bond
import FSPagerView
import SDWebImage
import SDCAlertView
import SwiftRater
import Alamofire
//                        _oo0oo_
//                       o8888888o
//                       88" . "88
//                       (| -_- |)
//                       0\  =  /0
//                     ___/`---'\___
//                   .' \|     |// '.
//                  / \|||  :  |||// \
//                 / _||||| -:- |||||- \
//                |   | \\  -  /// |   |
//                | \_|  ''\---/''  |_/ |
//                \  .-\__  '-'  ___/-. /
//              ___'. .'  /--.--\  `. .'___
//           ."" '<  `.___\_<|>_/___.' >' "".
//          | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//          \  \ `_.   \_ __\ /__ _/   .-` /  /
//      =====`-.____`.___ \_____/___.-`___.-'=====
//                        `=---='
// Đức phật nơi đây phù hộ code con chạy không Bug. Nam mô a di đà Phật

class ResultController: BaseController<ResultViewModel, ResultNavigator> {


    // MARK: - Properties

    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var resultTableView: UITableView!
    var dataSource = ResultsDataSource()
    var delegate: DataControllerDelegate?
   
    
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

    }


    // MARK: - Binding UI
    override func bindUI() {
        super.bindUI()

        backBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            if self?.viewModel.isLoadFromMoreResults == false {
                strongSelf.navigationController?.popViewController(animated: true)
            }
            else {
                strongSelf.navigationController?.popToRootViewController(animated: true)
            }
        }
    }

    //MARK: - Functions
    func doSomeThing() {

    }
    func setupTableView(){
        resultTableView.backgroundColor = .clear
        resultTableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        setupData()
        resultTableView.separatorColor = .clear
        resultTableView.delegate = dataSource
        resultTableView.dataSource = dataSource
        dataSource.reslutsDataDelegate = self
        dataSource.registerCell(forTableView: resultTableView)
        
    }
    func setupData(){
        if viewModel.isLoadFromMoreResults == false{
            dataSource.resultsModel = viewModel.resultsModel
            // type
            dataSource.itemIdentifyType = viewModel.itemIdentifyType
            // anh
            dataSource.listImageArray = viewModel.imageArray
            // anh
            imageView.image = viewModel.userImage
        }
        else{
            dataSource.resultsModel = viewModel.resultsModel
            // type
            dataSource.itemIdentifyType = viewModel.itemIdentifyType
            
            let imageURL = URL(string: viewModel.imageArray[0])
            imageView.sd_setImage(with: imageURL, completed: nil)
            
            viewModel.imageArray.removeFirst()
            dataSource.listImageArray = viewModel.imageArray
        }
       
    }
    // save history
    func saveToDataBase(model: ItemModel) {
        DispatchQueue.main.async { [self] in
            DatabaseManager.shared.createImage(plantbugModel: model)
            self.delegate?.saveData()
        }
    }
    // save collection
    func saveToCollectionDataBase(image: UIImage, model: ItemModel) {
        saveImage(image: image) { storedImageURL in
            DispatchQueue.main.async { [self] in
                print(storedImageURL)
                model.image = storedImageURL.lastPathComponent
                DatabaseManager.shared.createdCollectionModel(collectionModel: model)
                log.debug(model.image)
                log.debug(model.commonName)
                self.delegate?.saveData()
            }
        }
    }
    // save collection bug
    func saveToBugCollectionDataBase(image: UIImage, model: ItemModel) {
        saveImage(image: image) { storedImageURL in
            DispatchQueue.main.async { [self] in
                print(storedImageURL)
                model.image = storedImageURL.lastPathComponent
                DatabaseManager.shared.createBugModel(bugModel: model)
                log.debug(model.image)
                log.debug(model.commonName)
                self.delegate?.saveDataBug()
            }
        }
    }

}

// MARK: - Extension

extension ResultController: ResultsDataSourceDelegate {
    func loadWikiCell() {
        self.resultTableView.reloadData()
        hud.dismiss(animated: true)
    }
    
    func addLoading() {
        hud.show(in: self.view)
    }
    
    func addCollection() {
        
        guard let itemIdentify = dataSource.itemIdentifyType else {return}
        print("add collection",itemIdentify)
        // save add plant collection
        if itemIdentify == .plant{
            self.saveToCollectionDataBase(image: self.viewModel.userImage, model: self.viewModel.itemModel)
            print("save plant ")
            
        }
        // save add bug collection
        else {
            self.saveToBugCollectionDataBase(image: self.viewModel.userImage, model: self.viewModel.itemModel)
            print("save Bug")
        }
        
        let alert = AlertController(title: "Saved", message: "This item has been saved in the collection", preferredStyle: .alert)
        alert.addAction(AlertAction(title: "OK", style: .normal, handler:  { act in
            log.debug(self.viewModel.userImage)
            log.debug(self.viewModel.itemModel)
//            SwiftRater.rateApp()
        }))
        alert.present()
    }
    // more results
    func loadMoreResultsVC() {

        self.navigator?.navigate(to: .moreResults(moreItemModel: self.viewModel.results, identifyType: self.viewModel.itemIdentifyType, userImage: self.viewModel.userImage))
        
        let queue = DispatchQueue(label: "save more results", qos: .background)
        queue.async {
            if let firstItem = self.viewModel.results.first {
                let itemsToSave = self.viewModel.results.filter({ $0.uuid != firstItem.uuid })
                for i in itemsToSave {
                    self.saveToDataBase(model: i)
                }
            }
        }
    }
}
