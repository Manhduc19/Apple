//
//  CameraController.swift
//  baseapp
//
//  Created Thanh Nguyên Trần on 14/04/2022.
//  Copyright © 2022 Avengers Mobile Team. All rights reserved.
//
//  Template generated by Avengers Mobile Team
//

import UIKit
import QCropper
import Bond
import CameraManager
import SDCAlertView
import JGProgressHUD
import Moya
import JGProgressHUD
import SwiftyUserDefaults

//                        _oo0oo_
//                       o8888888o
//                       88" . "88
//                       (| -_- |)
//                       0\  =  /0
//                     ___/`---'\___
//                   .' \|     |// '.
//                  / \|||  :  |||// \
//                 / _||||| -:- |||||- \
//                |   | \\  -  /// |   |
//                | \_|  ''\---/''  |_/ |
//                \  .-\__  '-'  ___/-. /
//              ___'. .'  /--.--\  `. .'___
//           ."" '<  `.___\_<|>_/___.' >' "".
//          | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//          \  \ `_.   \_ __\ /__ _/   .-` /  /
//      =====`-.____`.___ \_____/___.-`___.-'=====
//                        `=---='
// Đức phật nơi đây phù hộ code con chạy không Bug. Nam mô a di đà Phật

class CameraController: BaseController<CameraViewModel, CameraNavigator> {


    // MARK: - Properties

    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var previewCameraView: UIView!
    @IBOutlet weak var snaptipBtn: UIButton!
    @IBOutlet weak var captureBtn: UIButton!
    @IBOutlet weak var galleryBtn: UIButton!
    var itemIdentifyType: HomeItemType?
    var cameraManager = CameraManager()
    var imagePicker = UIImagePickerController()
    
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
        cameraManager.addPreviewLayerToView(previewCameraView)
        cameraManager.cameraDevice = .back
        
        self.tabBarController?.tabBar.isHidden = true
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

    }


    // MARK: - Binding UI
    override func bindUI() {
        super.bindUI()
        snaptipBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            strongSelf.navigator?.navigate(to: .snaptip)
        }.dispose(in : bag)
        
        galleryBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            self?.collectPhotoFromGallery()
        }.dispose(in : bag)
        
        backBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            strongSelf.navigationController?.popViewController(animated: true)
        }.dispose(in : bag)
        
        // chup anh
        captureBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else { return }
            if Payer.shared.isPurchased {
                strongSelf.cameraManager.capturePictureWithCompletion({ result in
                    switch result {
                        case .failure:
                        AlertController.alert(withTitle: "Error", message: "We can not recognize your image please re-take a photo ", actionTitle: "OK")
                        self?.cameraManager.resumeCaptureSession()
                        case .success(let content):
                        if let img = content.asImage {
                            DispatchQueue.main.async {
                                self?.cameraManager.stopCaptureSession()
                                strongSelf.loadData(image: img)
                            }
                        } else {
                            // Thong bao loi
                            DispatchQueue.main.async {
                                AlertController.alert(withTitle: "Error", message: "We can not recognize your image please re-take a photo ", actionTitle: "OK")
                                
                                self?.cameraManager.resumeCaptureSession()
                                    
                            }
                        }
                        break
                    }
                })
            }
            else{
                if DefaultsUtil.isValidFreeTrial(){
                    strongSelf.cameraManager.capturePictureWithCompletion({ result in
                        switch result {
                            case .failure:
                            AlertController.alert(withTitle: "Error", message: "We can not recognize your image please re-take a photo ", actionTitle: "OK")
                            self?.cameraManager.resumeCaptureSession()
                            case .success(let content):
                            if let img = content.asImage {
                                DispatchQueue.main.async {
                                    self?.cameraManager.stopCaptureSession()
                                    strongSelf.loadData(image: img)
                                }
                            } else {
                                // Thong bao loi
                                DispatchQueue.main.async {
                                    AlertController.alert(withTitle: "Error", message: "We can not recognize your image please re-take a photo ", actionTitle: "OK")
                                    self?.cameraManager.resumeCaptureSession()
                                        
                                }
                            }
                            break
                        }
                    })
                }
                else{
                    self?.showPremium()
                }
            }
            
        }.dispose(in: bag)

        
        
    }

    //MARK: - Functions
    func doSomeThing() {

    }
    func setupLayout(){
        tabBarController?.tabBar.isHidden = true
        navigationController?.isNavigationBarHidden = true
    }
    func collectPhotoFromGallery(){
        PermissionUtil.checkPhoto { success in
            if success {
                self.imagePicker.delegate = self
                self.imagePicker.sourceType = .photoLibrary
                self.imagePicker.modalPresentationStyle = .fullScreen
                self.present(self.imagePicker, animated: true, completion: nil)
            }
        }

    }
    func showPremium() {
        navigator?.navigate(to: .premium)
    }
    //load data
    func loadData( image: UIImage) {
        hud.show(in: self.view)
        viewModel.loadAPI(image: image, type: viewModel.itemIdentify) { arrayItemModel in
            self.hud.dismiss(animated: true)
            self.cameraManager.resumeCaptureSession()
            if let datas = arrayItemModel, datas.count != 0 {
               // quet api thanh cong
                // tang bien freetrial
                if Payer.shared.isPurchased == false {
                    DefaultsUtil.inCrementFreeTrial()
                }
//                self.showAd {
//                }
                self.showResultsVC(image: image, results: datas)
                
            } else {
                AlertController.alert(withTitle: "Error", message: "We can not recognize your image please re-take a photo ", actionTitle: "OK")
            }
        }
    }
    // show result vc
    func showResultsVC(image: UIImage, results: [ItemModel]) {
//        showAd {
//            }
            self.navigator?.navigate(to: . results(item: results, userImage: image, identifyType: self.viewModel.itemIdentify))
            self.saveToDataBase(image: image, model: (results.first)!)
    }
    func saveToDataBase(image: UIImage, model: ItemModel) {
        saveImage(image: image) { storedImageURL in
            DispatchQueue.main.async { [self] in
                print(storedImageURL)
                model.image = storedImageURL.lastPathComponent
                DatabaseManager.shared.createImage(plantbugModel: model)
//                self.loadData()
            }
        }
    }


}

// MARK: - Extension
extension CameraController {

}
extension CameraController : UIImagePickerControllerDelegate & UINavigationControllerDelegate{
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        if let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
                    let cropper = CropperViewController(originalImage: image)
                    cropper.delegate = self
                    picker.dismiss(animated: true) {
                    self.present(cropper, animated: true, completion: nil)
                    }
            }
        dismiss(animated: true, completion: nil)
    }
}
extension CameraController : CropperViewControllerDelegate{
    func cropperDidConfirm(_ cropper: CropperViewController, state: CropperState?) {
        cropper.dismiss(animated: true, completion: nil)
            if let state = state,
                let image = cropper.originalImage.cropped(withCropperState: state) {

            hub.show(in: self.view)
            self.viewModel.loadAPI(image: image, type: viewModel.itemIdentify) { resultsArray in
                hub.dismiss(animated: true)
                if resultsArray == nil {
                    AlertController.alert(withTitle: "Error", message: "We can not recognize your image please re-select a photo ", actionTitle: "OK")

                }
                else {
                    DefaultsUtil.inCrementFreeTrial()
                    self.showResultsVC(image: image, results: resultsArray!)
                }
            }
            } else {
                print("Something went wrong")
            }
            self.dismiss(animated: true, completion: nil)
            }
}


