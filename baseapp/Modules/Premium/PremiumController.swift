//
//  PremiumController.swift
//  baseapp
//
//  Created Thanh Nguyên Trần on 14/04/2022.
//  Copyright © 2022 Avengers Mobile Team. All rights reserved.
//
//  Template generated by Avengers Mobile Team
//

import UIKit
import SDCAlertView
//                        _oo0oo_
//                       o8888888o
//                       88" . "88
//                       (| -_- |)
//                       0\  =  /0
//                     ___/`---'\___
//                   .' \|     |// '.
//                  / \|||  :  |||// \
//                 / _||||| -:- |||||- \
//                |   | \\  -  /// |   |
//                | \_|  ''\---/''  |_/ |
//                \  .-\__  '-'  ___/-. /
//              ___'. .'  /--.--\  `. .'___
//           ."" '<  `.___\_<|>_/___.' >' "".
//          | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//          \  \ `_.   \_ __\ /__ _/   .-` /  /
//      =====`-.____`.___ \_____/___.-`___.-'=====
//                        `=---='
// Đức phật nơi đây phù hộ code con chạy không Bug. Nam mô a di đà Phật

class PremiumController: BaseController<PremiumViewModel, PremiumNavigator> {


    // MARK: - Properties

    @IBOutlet weak var premiumTableView: UITableView!
    @IBOutlet weak var privacyBtn: UIButton!
    @IBOutlet weak var restoreBtn: UIButton!
    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet weak var termBtn: UIButton!
    var dataSource = PremiumDataSoure()
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
    }
 


    // MARK: - Binding UI
    override func bindUI() {
        super.bindUI()
        restoreBtn.reactive.tap
            .observeNext {[weak self] in
                guard let strongSelf = self else { return }
                self?.viewModel.showLoading()
                Payer.shared.restore { isSuccess, error in
                    self?.viewModel.hideLoading()
                    if isSuccess {
                        Payer.shared.setPurchased()
                        print("restore")
                    }
                    else {
                        AlertController.alert(withTitle: "Restore", message: "Restore failure. Please try again!", actionTitle: "OK")
                    }
                }
            }
            .dispose(in: bag)
        
        privacyBtn.reactive.tap
            .observeNext {[weak self] in
                guard let strongSelf = self else { return }
                strongSelf.policy()
            }
            .dispose(in: bag)
        termBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            strongSelf.term()
        }.dispose(in : bag)
        backBtn.reactive.tap
            .observeNext { [weak self] in
                guard let strongSelf = self else { return }
                if DefaultsUtil.isCompleteOnboarding() {
                    strongSelf.dismiss(animated: true)
                   strongSelf.navigator?.navigate(to: .mainTabbar)
                }
                else {
                   strongSelf.navigator?.navigate(to: .mainTabbar)
               
                }
            }
            .dispose(in: bag)
        
        viewModel.isPurchased
            .observeNext {[weak self] value in
                if value {
                    guard let strongSelf = self else { return }
                    if DefaultsUtil.isCompleteOnboarding() {
                        strongSelf.dismiss(animated: true)
                    }
                    else {
                        DefaultsUtil.completeOnboarding()
                        strongSelf.navigator?.navigate(to: .mainTabbar)
                    }
                }
                else {
                    return
                }
            }
            .dispose(in: bag)
        
        viewModel.isShowAlert
            .observeNext {[weak self] (success, errorMsg) in
                guard let strongSelf = self else { return }
                if success {
                    strongSelf.showErrorPurchase(msg: errorMsg)
                }
            }
            .dispose(in: bag)
    }

    //MARK: - Functions
    func doSomeThing() {

    }
    func setupTableView(){
        premiumTableView.backgroundColor = .clear
        premiumTableView.delegate = dataSource
        premiumTableView.dataSource = dataSource
        dataSource.registerCell(forTableView: premiumTableView)
    }
    func policy(){
        self.openLink(link: K_POLICY)
    }
    func term(){
        self.openLink(link: K_TERM)
    }
    
    func showErrorPurchase(msg: String) {
        AlertController.alert(withTitle: "Message", message: msg, actionTitle: "OK")
    }
    

}

// MARK: - Extension
extension PremiumController {

}
