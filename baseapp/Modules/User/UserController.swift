//
//  UserController.swift
//  baseapp
//
//  Created Thanh Nguyên Trần on 13/04/2022.
//  Copyright © 2022 Avengers Mobile Team. All rights reserved.
//
//  Template generated by Avengers Mobile Team
//

import UIKit
import Bond
import SwiftRater
import MessageUI
import SDCAlertView
import SafariServices
import JGProgressHUD
import SwiftNotificationCenter
//                        _oo0oo_
//                       o8888888o
//                       88" . "88
//                       (| -_- |)
//                       0\  =  /0
//                     ___/`---'\___
//                   .' \|     |// '.
//                  / \|||  :  |||// \
//                 / _||||| -:- |||||- \
//                |   | \\  -  /// |   |
//                | \_|  ''\---/''  |_/ |
//                \  .-\__  '-'  ___/-. /
//              ___'. .'  /--.--\  `. .'___
//           ."" '<  `.___\_<|>_/___.' >' "".
//          | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//          \  \ `_.   \_ __\ /__ _/   .-` /  /
//      =====`-.____`.___ \_____/___.-`___.-'=====
//                        `=---='
// Đức phật nơi đây phù hộ code con chạy không Bug. Nam mô a di đà Phật

class UserController: BaseController<UserViewModel, UserNavigator> {


    // MARK: - Properties

    @IBOutlet weak var upgradeBtn: UIButton!
    @IBOutlet weak var userTableView: UITableView!
    var cellHeight : CGFloat = 80
    var data : [String] = ["Rate Us", "Contact Us" , "Restore" ,"Privacy Policy" , "Terms of User" ]
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

    }


    // MARK: - Binding UI
    override func bindUI() {
        super.bindUI()

        upgradeBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            strongSelf.navigator?.navigate(to: .home)
            self?.navigationController?.isNavigationBarHidden = true
            self?.tabBarController?.tabBar.isHidden = true
        }
    }

    //MARK: - Functions
    func doSomeThing() {

    }
    func setupTableView(){
        userTableView.delegate = self
        userTableView.dataSource = self
        userTableView.register(cellType: UserCell.self, bundle: nil)
        userTableView.separatorColor = .clear
        userTableView.isScrollEnabled = false
    }

}

// MARK: - Extension
extension UserController {

}
extension UserController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return data.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(with: UserCell.self, for: indexPath)
        cell.selectionStyle =  UITableViewCell.SelectionStyle.none
        if indexPath.row == 0 {
            cell.userLabel.text = data[0]
            cell.lineView.backgroundColor = .white
            return cell
        }
        else {
            cell.userLabel.text = data[indexPath.row]
            cell.selectionStyle = .none
            return cell
        }
        
        
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return tableView.frame.size.height / 6
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let item = indexPath.row
        //rate
        if item == 0 {
            SwiftRater.rateApp(host: self)
        }
        //contact
      
        if item == 1 {
            self.sendEmail()
        }
        //restore
        if item == 2 {
            viewModel.showLoading()
            Payer.shared.restore { isSuccess, error in
                self.viewModel.hideLoading()
                if isSuccess {
                    Payer.shared.setPurchased()
                    print("restore")
                }
                else {
                    AlertController.alert(withTitle: "Restore", message: "Restore failure. Please try again!", actionTitle: "OK")
                }
            }
        }
        
        // privacy
        else if item == 3 {
            print("privacy policy")
            self.openLink(link: K_POLICY)
        }
        //term
        else if item == 4 {
            print("term of use")
            self.openLink(link: K_TERM)
        }
        else {
            return
        }
        
        
    }

    
    
    
}
extension UserController {
    
    func sendEmail() {
        if MFMailComposeViewController.canSendMail() {
            let mail = MFMailComposeViewController()
            mail.mailComposeDelegate = self
            mail.setToRecipients([K_EMAIL_SUPPORT])
            mail.setSubject(K_APP_NAME)
            mail.setMessageBody("<p>Enter your feedback here!</p>", isHTML: true)
            present(mail, animated: true)
        } else {
            // show failure alert
            AlertController.alert(withTitle: "Error", message: "You need login email application", actionTitle: "OK")
        }
    }

    func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?) {
        controller.dismiss(animated: true)
    }
}
extension UserController: MFMailComposeViewControllerDelegate {
    
}
