//
//  CollectionController.swift
//  baseapp
//
//  Created Thanh Nguyên Trần on 13/04/2022.
//  Copyright © 2022 Avengers Mobile Team. All rights reserved.
//
//  Template generated by Avengers Mobile Team
//

import UIKit
import SDCAlertView

//                        _oo0oo_
//                       o8888888o
//                       88" . "88
//                       (| -_- |)
//                       0\  =  /0
//                     ___/`---'\___
//                   .' \|     |// '.
//                  / \|||  :  |||// \
//                 / _||||| -:- |||||- \
//                |   | \\  -  /// |   |
//                | \_|  ''\---/''  |_/ |
//                \  .-\__  '-'  ___/-. /
//              ___'. .'  /--.--\  `. .'___
//           ."" '<  `.___\_<|>_/___.' >' "".
//          | | :  `- \`.;`\ _ /`;.`/ - ` : | |
//          \  \ `_.   \_ __\ /__ _/   .-` /  /
//      =====`-.____`.___ \_____/___.-`___.-'=====
//                        `=---='
// Đức phật nơi đây phù hộ code con chạy không Bug. Nam mô a di đà Phật
enum SelectTypeCollection {
    case plant
    case bug
}
class CollectionController: BaseController<CollectionViewModel, CollectionNavigator> {


    // MARK: - Properties

    @IBOutlet weak var plantsLabel: UILabel!
    @IBOutlet weak var bugPointView: UIView!
    @IBOutlet weak var plantPointView: UIView!
    
    @IBOutlet weak var bugslabel: UILabel!
    
    
    @IBOutlet weak var bugsBtn: UIButton!
    @IBOutlet weak var plantsBtn: UIButton!
    @IBOutlet weak var collectionTableView: UITableView!
    var dataSource = CollectionDataSource()
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationController?.isNavigationBarHidden = true

     
        setupLayout()
        setUpTableView(item: .plant)
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
       // setupLayout()
       // self.tabBarController?.tabBar.isHidden = false
    }


    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionTableView.reloadData()
    }


    // MARK: - Binding UI
    override func bindUI() {
        super.bindUI()
        plantsBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            strongSelf.selectCollection(option: .plant)
            
        }
        bugsBtn.reactive.tap.observeNext { [weak self] in
            guard let strongSelf = self else {return}
            strongSelf.selectCollection(option: .bug)
           
        }
    }

    //MARK: - Functions
    func doSomeThing() {

    }
    func setupLayout(){
        selectCollection(option: .plant)
        collectionTableView.reloadData()
    }
    
    func setUpTableView(item : HomeItemType) {
        self.collectionTableView.separatorColor = UIColor.clear
        dataSource.array = viewModel.models
        dataSource.registerCell(forTableView: collectionTableView)
        viewModel.loadTableViewDelegate = self
        dataSource.collectionDelegate = self
        
        
        collectionTableView.emptyDataSetSource = dataSource
        collectionTableView.emptyDataSetDelegate = dataSource
        collectionTableView.delegate = dataSource
        collectionTableView.dataSource = dataSource
        
    }
    
    func selectCollection(option : SelectTypeCollection){
        switch option {
        case .plant:
            plantsLabel.font = UIFont.boldSystemFont(ofSize: 20.0)
            bugslabel.font = UIFont.systemFont(ofSize: 17.0)
            plantPointView.isHidden = false
            bugPointView.isHidden = true
            viewModel.loadData()
            updateDataOfCollectionView(item: .plant)
            
        case .bug:
            bugslabel.font = UIFont.boldSystemFont(ofSize: 20.0)
            plantsLabel.font = UIFont.systemFont(ofSize: 17.0)
            bugPointView.isHidden = false
            plantPointView.isHidden = true
            viewModel.loadDataBug()
            updateDataOfCollectionView(item: .bug)
            
        }
    }
    func updateDataOfCollectionView(item : HomeItemType) {
        if item == .bug {
            dataSource.array = viewModel.modelsBug
            dataSource.typeCollection = .bug
            print("bug")
        }
        else{
            dataSource.array = viewModel.models
            dataSource.typeCollection = .plant
            print("plant")
        }
        collectionTableView.reloadData()
    }

}

// MARK: - Extension
extension CollectionController: CollectDataSourceDelegate {
    func loadCollectionDetail(itemModel: HistoryModel) {
        self.navigator?.navigate(to: .detailResult(itemModel: itemModel))
    }
    
   
   
    func confirmDeleteBugItem(itemModel: HistoryModel?) {
        guard let itemToDelete = itemModel else { return }
        let alert = AlertController(title: "Do you want to delete this item?", message: "*This action cannot be undone*", preferredStyle: .alert)
        alert.addAction(AlertAction(title: "Cancel", style: .normal))
        alert.addAction(AlertAction(title: "Delete", style: .destructive, handler: { act in
            DatabaseManager.shared.deleteBug(id: itemToDelete.id,complete: { [weak self] in
                self?.viewModel.loadDataBug()
                
            })
        }))
        alert.present()
    
    }
    func confirmDeletePlantItem(itemModel: HistoryModel?) {
        guard let itemToDelete = itemModel else { return }
        let alert = AlertController(title: "Do you want to delete this item?", message: "*This action cannot be undone*", preferredStyle: .alert)
        alert.addAction(AlertAction(title: "Cancel", style: .normal))
        alert.addAction(AlertAction(title: "Delete", style: .destructive, handler: { act in
            DatabaseManager.shared.deletePlant(id: itemToDelete.id,complete: { [weak self] in
                self?.viewModel.loadData()
                
            })
           // self.collectionTableView.reloadData()
        }))
        alert.present()
    }
    
    

    
}
extension CollectionController: CollectionLoadTableViewDelegate {
    func reloadTableView() {
        dataSource.array = viewModel.models
        collectionTableView.reloadData()
    }
    func reloadBugTableView () {
        dataSource.array = viewModel.modelsBug
        collectionTableView.reloadData()
    }
}

